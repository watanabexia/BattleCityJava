#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

R9.1 Superclas and subclass
Identify the superclass and subclass in each of the following pairs of
classes

a. Employee, Manager
    superclass: Employee
    subclass: Manager
b. GraduateStudent, Student
    superclass: Student
    subclass: GraduateStudent
c.  Person, Student
    superclass: Person
    subclass: Student
d. Employee, Professor
    superclass: Employee
    subclass: Professor
e. BankAccount, CheckingAccount
    superclass: BankAccount
    subclass: CheckingAccount
f.  Vehicle, Car
    superclass: Vehicle
    subclass: Car
g. Vehicle, Minivan
    superclass: Vehicle
    subclass: Minivan
h. Car, Minivan
    superclass: Car
    subclass: Minivan
i.  Truck, Vehicle
    superclass: Vehicle
    subclass: Truck

R9.2 superclass and subclass
Consider a program for managing inventory in a small appliance store. Why
isn’t it useful to have a superclass SmallAppliance and subclasses Toaster,
CarVacuum, TravelIron, and so on?

Because for a program that manage the inventory of a small appliance store,
the only things we care about are the amount and price for each small
appliance, and thus they share the same method and instance variable. We
do not need to utilize the inheritance relationship to have special methods
for subclasses.

R9.4 SavingsAccount
Which methods does the SavingsAccount class in How To 9.1 inherit from its
superclass? Which methods does it override? Which methods does it add?

Inherit: deposit, getBalance
Override: monthEnd, withDraw
Add: setInterestRate, SavingsAccount

R9.6 Sandwich
Suppose the class Sub extends the class Sandwich. Which of the following
assignments are legal?

Sandwich x = new Sandwich();
Sub y = new Sub();

a. x = y;
    Legal
b. y = x;
    Illegal
c.  y = new Sandwich();
    Illegal
d. x = new Sub();
    Legal


R9.7 Inheretence -use the UML diagram tool in IntelliJ and indicate to the
grader where uml file is located
Draw an inheritance diagram that shows the inheritance relationships between
these classes.

•  Person
•  Instructor
•  Employee
•  Classroom
•  Student
•  Object

uml file location: R9_7/R9_7.uml

R9.8 Inheretence -use the UML diagram tool in IntelliJ and indicate to the
grader where uml file is located
In an object-oriented traffic simulation system, we have the classes listed
below. Draw an inheritance diagram that shows the relationships between
these classes.

•  Vehicle
•  PickupTruck
•  Car
•  SportUtilityVehicle
•  Truck
•  Minivan
•  Sedan
•  Bicycle
•  Coupe
•  Motorcycle

uml file location: R9_8/R9_8.uml

R9.9 Inheretence -use the UML diagram tool in IntelliJ and indicate to the
grader where uml file is located
What inheritance relationships would you establish among the following
classes?

•  Student
•  SeminarSpeaker
•  Professor
•  Person
•  TeachingAssistant
•  Course
•  Employee
•  Seminar
•  Secretary
•  Lecture
•  DepartmentChair
•  ComputerLab
•  Janitor

uml file location: R9_9/R9_9.uml

R9.10 Casting
How does a cast such as (BankAccount)x differ from a cast of number
values such as (int)x?

(BankAccount) x is a reference type casting while (int) x is a primitive
type casting. Reference type casting can only cast a reference to another
type that is related to the current type by inheritance. It is always
allowed to cast to a supertype, while it needs to go through a type check
that may throw a ClassCastException to cast to a subtype.

R9.11 instanceof operator
Which of these conditions returns true? Check the Java documentation for
the inheritance patterns. Recall that System.out is an object of the
PrintStream class.

a. System.out instanceof PrintStream
true
b. System.out instanceof OutputStream
true
c.  System.out instanceof LogStream
false
d. System.out instanceof Object
true
e. System.out instanceof Closeable
true
f.  System.out instanceof Writer
false

R9.14 Edible interface
Suppose the class Sandwich implements the Edible interface, and you are
given the variable declarations
    Sandwich sub = new Sandwich();
    Rectangle cerealBox = new Rectangle(5, 10, 20, 30);
    Edible e = null;
Which of the following assignment statements are legal?

a. e = sub;
Legal
b. sub = e;
Illegal
c. sub = (Sandwich) e;
Legal
d. sub = (Sandwich) cerealBox;
Illegal
e. e = cerealBox;
Illegal
f. e = (Edible) cerealBox;
Illegal
g. e = (Rectangle) cerealBox;
Illegal
h. e = (Rectangle) null;
Illegal