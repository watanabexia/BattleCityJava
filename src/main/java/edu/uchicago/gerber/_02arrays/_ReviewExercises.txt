#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################

R5.6 Parameters and return values.  The difference between an argument and a return value is that an argument is passed
into a method, whereas a return value is the value returned from it.

You can have n number of arguments, whereas you can only have one return value. By varying either the number and/or type of arguments,
you change the method's signature, which means you may overload a method. Varying the return value only does not change the
method's signature and therefore does not qualify the method for overloading.

Since Java5, you can even specify a variable number of arguments aka varargs which looks something like this:
 private String[] someMethod(int nGrade, String... strNickNames) {//implementation};
Notice that the varargs parameter "String... strNickNames" must be listed last.  Calling this method would look something like this:
 String[] strReturnValues = someMethod(99, "Jim", "Jamie", "James", "Jamey", "Jimmy", "Jimbo");

R5.8 Pseudocode.
create a mapping map = {'A':2,'B':2,...,'Y':9} using the standard letters on the phone pad
for each character in the given telephone number
    if the character c is not a number
        change the character to map[c]
return the modified telephone number

R5.10 Variable scope.
line 3: args: parameter variable. Scope: line 3-8
line 5: i: local variable. Scope: line 5-7
line 6: b: local variable. Scope: line 6-7
line 10: i: parameter variable. Scope: line 10-15
line 12: n: local variable. Scope: line 12-14
line 17: a: parameter variable. Scope: line 17-26
line 19: b: local variable. Scope: line 19-25
line 20: n: local variable. Scope: line 20-24
The program would print 26.

R5.14 Pass by value versus pass by reference.
Because only the value of x and y is passed to the method. Only the parameter variable a and b
exchanged their values.

R6.3 Considering loops.
a: 25
b: 13
c: 12
d: exception: index out of bound.
e: 11
f: 25
g: 12
h: -1

R6.10 Enhanced for-loop.
a: for (double element : values) { total = total + element; }
b:
boolean isFirst = true;
for (double element : values) {
    if (isFirst) {
        isFirst = false;
    } else {
        total = total + element;
    }
}
c:
int i = 0;
for (double element : values) {
    if (element == target) {
        return i;
    }
    i++;
}

R6.23 Computing runs.
Initialize maxLength = 1, currentLength = 1, lastNumber = run[0]
for index i = 1 to run.length - 1
    if run[i] == lastNumber
        currentLength increase by 1
    else
        initialize currentLength = 1
        lastNumber = run[i]
    if currentLength > maxLength
        update maxLength = currentLength
return maxLength

R6.29 Multi-dimensional arrays.
1,
for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLUMNS; j++) {
        values[i][j] = 0;
    }
}
2,
for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLUMNS; j++) {
        values[i][j] = (i+j)%2;
    }
}
3,
for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLUMNS; j++) {
        if (i == 0 || i == ROWS - 1) {
            values[i][j] = 0;
        }
    }
}
4,
int sum = 0;
for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLUMNS; j++) {
        sum = sum + values[i][j];
    }
}
5,
for (int i = 0; i < ROWS; i++) {
    for (int j = 0; j < COLUMNS; j++) {
        System.out.print(values[i][j]);
        System.out.print(" ");
    }
    System.out.println();
}

R6.34 Understanding arrays.
a: False
b: True
c: False
d: True
e: False
f: True

R7.1 Exceptions.
Reading: a FileNotFoundException occurs when the Scanner object is constructed.
Writing: an empty file would be created.

R7.6 Throwing and catching.
Throwing exception is used to report an error.
Catching exception is used to handle an error.

R7.7 Checked versus unchecked.
A checked exception is a problem that can occur no matter how careful you are. The compiler would ensure
that they are handled or the program will not compile. Example: IOException
An unchecked exception is a problem that is caused by the programmers' fault. The compiler would not check
whether they are handled or not. Example: IndexOutOfBoundsException
We need to declare the checked exception with the throws reserved word.

R7.8 Exceptions philosophy in Java.
Because IndexOutOfBoundException is an unchecked exception and even if they are not handled, the program
would still be successfully compiled. It is the programmers' duty to prevent these kinds of error from
happening.

R7.11 What is an exception object.
The program would terminate the original execution flow and run the corresponding handler for the exception.

R7.15 Scanner exceptions. Explain why these are either checked or unchecked.
next():
    NoSuchElementException: unchecked
    IllegalStateException: unchecked
nextInt():
    NoSuchElementException: unchecked
    IllegalStateException: unchecked
    InputMismatchException: unchecked
