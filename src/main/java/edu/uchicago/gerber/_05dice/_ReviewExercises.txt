#########################################################################
# Use this file to answer Review Exercises from the Big Java textbook
#########################################################################
R10.5 Events
Event object is an instance of a subclass of java.util.EventObject, which
holds information about something that's happened to its source.
Event listener belongs to a class created by the application programmer.
Its methods describe the actions to be taken when an event occurs.
Event sources report on events. When an event occurs, the event source
notifies all event listeners.

R10.6 actionPerformed
The event source would call the actionPerformed method.
The call occurs when the event occurs.

R10.11 Inner class and event-listeners
First, listener classes tend to be very short. We can put the inner class
close to where it is needed, without cluttering up the remainder of the
project. Moreover, inner classes have a very attractive feature: their
methods can access instance variables and methods of the surrounding class.
This feature is particularly useful when implementing event handlers. It
allows the inner class to access variables without having to receive them
as constructors or methods arguments.

We can still implement event listeners. We can implement it in separate
java files and pass the required variables as constructors or method
arguments.

R10.14 Object hierarchies
declared in JTextArea: append()
inherits from JTextComponent: setEditable()
inherits from JComponent: setEnabled()

R10.22 Graphic methods
Add two more arguments to the drawFlag() method which corresponding to
the color of the left and right.

R11.2 Layout managers
The layout managers would automatically direct the arrangement of the
components in the container, and we don't need to specify the exact
location for every component.

R11.11 ButtonGroup
Because radio buttons exclude each other while the check boxes do not.

R11.19 Types of Events
ActionEvents are generated by buttons, radio buttons, check boxes,
combo boxes, menus, and timers. They are handled by ActionListener.
MouseEvents are generated by mouses. They are handled by MouseListener.

R11.20 Events
Action event:
    ACTION_EVENT_MASK, ADJUSTMENT_EVENT_MASK, COMPONENT_EVENT_MASK,
    consumed, CONTAINER_EVENT_MASK, FOCUS_EVENT_MASK,
    HIERARCHY_BOUNDS_EVENT_MASK, HIERARCHY_EVENT_MASK, id,
    INPUT_METHOD_EVENT_MASK, INVOCATION_EVENT_MASK,
    ITEM_EVENT_MASK, KEY_EVENT_MASK, MOUSE_EVENT_MASK,
    MOUSE_MOTION_EVENT_MASK, MOUSE_WHEEL_EVENT_MASK,
    PAINT_EVENT_MASK, RESERVED_ID_MAX, TEXT_EVENT_MASK,
    WINDOW_EVENT_MASK, WINDOW_FOCUS_EVENT_MASK, WINDOW_STATE_EVENT_MASK,
    source, ACTION_FIRST, ACTION_LAST, ACTION_PERFORMED, ALT_MASK,
    CTRL_MASK, META_MASK, SHIFT_MASK
Mouse event: (additional)
    MOUSE_CLICKED, MOUSE_DRAGGED, MOUSE_ENTERED, MOUSE_EXITED,
    MOUSE_PRESSED, MOUSE_RELEASED, MOUSE_WHEEL

R11.21 ActionListener versus MouseListener
    Because MouseListener needs to handle five different events that can
    be triggered by the mouse (press/release/click/enter/exit), while
    the event sources for ActionListener would only generate one kind of
    event.